package mcp

import "github.com/mark3labs/mcp-go/mcp"

func GetAllTools() []mcp.Tool {
	return []mcp.Tool{
		mcp.NewTool("list_ranges",
			mcp.WithDescription("List all deployed ranges for the authenticated user"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("get_range_details",
			mcp.WithDescription("Get detailed information about a specific deployed range"),
			mcp.WithNumber("range_id",
				mcp.Required(),
				mcp.Description("The ID of the range to get details for"),
			),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("get_range_key",
			mcp.WithDescription("Get the SSH private key for a specific deployed range"),
			mcp.WithNumber("range_id",
				mcp.Required(),
				mcp.Description("The ID of the range to get the SSH key for"),
			),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("list_blueprints",
			mcp.WithDescription("List all available blueprints for the authenticated user"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("get_blueprint_details",
			mcp.WithDescription("Get detailed information about a specific blueprint"),
			mcp.WithNumber("blueprint_id",
				mcp.Required(),
				mcp.Description("The ID of the blueprint to get details for"),
			),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("check_job_status",
			mcp.WithDescription("Check the status of a specific job"),
			mcp.WithString("job_id",
				mcp.Required(),
				mcp.Description("The ARQ job ID to check status for"),
			),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("get_user_info",
			mcp.WithDescription("Get information about the currently authenticated user"),
			mcp.WithReadOnlyHintAnnotation(true),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("deploy_range",
			mcp.WithDescription("Deploy a new range from a blueprint"),
			mcp.WithString("name",
				mcp.Required(),
				mcp.Description("Name for the new range"),
			),
			mcp.WithString("description",
				mcp.Description("Optional description for the range"),
			),
			mcp.WithNumber("blueprint_id",
				mcp.Required(),
				mcp.Description("The ID of the blueprint to deploy"),
			),
			mcp.WithString("region",
				mcp.Required(),
				mcp.Description("OpenLabs supported region (us_east_1 or us_east_2)"),
			),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(false),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("destroy_range",
			mcp.WithDescription("Destroy a deployed range (this action is irreversible)"),
			mcp.WithNumber("range_id",
				mcp.Required(),
				mcp.Description("The ID of the range to destroy"),
			),
			mcp.WithBoolean("confirm",
				mcp.Required(),
				mcp.Description("Must be true to confirm destruction"),
			),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithDestructiveHintAnnotation(true),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("create_blueprint",
			mcp.WithDescription("Create a new blueprint from JSON specification"),
			mcp.WithObject("blueprint",
				mcp.Required(),
				mcp.Description("Complete blueprint specification in JSON format"),
			),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(false),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("delete_blueprint",
			mcp.WithDescription("Delete a blueprint (this action is irreversible)"),
			mcp.WithNumber("blueprint_id",
				mcp.Required(),
				mcp.Description("The ID of the blueprint to delete"),
			),
			mcp.WithBoolean("confirm",
				mcp.Required(),
				mcp.Description("Must be true to confirm deletion"),
			),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithDestructiveHintAnnotation(true),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(true),
		),
		mcp.NewTool("update_aws_secrets",
			mcp.WithDescription("Update AWS credentials for cloud deployments"),
			mcp.WithString("aws_access_key",
				mcp.Required(),
				mcp.Description("Access key for AWS account"),
			),
			mcp.WithString("aws_secret_key",
				mcp.Required(),
				mcp.Description("Secret key for AWS account"),
			),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(false),
		),
		mcp.NewTool("update_azure_secrets",
			mcp.WithDescription("Update Azure credentials for cloud deployments"),
			mcp.WithString("azure_client_id",
				mcp.Required(),
				mcp.Description("Client ID for Azure"),
			),
			mcp.WithString("azure_client_secret",
				mcp.Required(),
				mcp.Description("Client secret for Azure"),
			),
			mcp.WithString("azure_tenant_id",
				mcp.Required(),
				mcp.Description("Tenant ID for Azure"),
			),
			mcp.WithString("azure_subscription_id",
				mcp.Required(),
				mcp.Description("Subscription ID for Azure"),
			),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(false),
		),
		mcp.NewTool("login",
			mcp.WithDescription("Login to OpenLabs with email and password"),
			mcp.WithString("email",
				mcp.Required(),
				mcp.Description("Email address for authentication"),
			),
			mcp.WithString("password",
				mcp.Required(),
				mcp.Description("Password for authentication"),
			),
			mcp.WithReadOnlyHintAnnotation(false),
			mcp.WithDestructiveHintAnnotation(false),
			mcp.WithIdempotentHintAnnotation(true),
			mcp.WithOpenWorldHintAnnotation(false),
		),
	}
}
